"use client";

import { useCopilotAction, useCopilotReadable } from "@copilotkit/react-core";
import { authClient } from "@/lib/auth-client";

export function useCopilotActions() {
  const { data: session } = authClient.useSession();
  const organizationId = session?.userDetails?.organizationId;

  // Rendre les donn√©es de l'organisation accessibles √† CopilotKit
  useCopilotReadable({
    description: "Informations sur l'organisation actuelle",
    value: {
      organizationId,
      organizationName: session?.userDetails?.organization?.name,
      userRole: session?.userDetails?.role,
      userName: session?.userDetails?.name,
    },
  });

  

  // Action pour rechercher des clients
  useCopilotAction({
    name: "searchClients",
    description: "Rechercher des clients dans l'organisation",
    parameters: [
      {
        name: "query",
        type: "string",
        description: `Terme de recherche pour les clients 
        üéØ Sc√©narios Impl√©ment√©s
1. D√âTECTION DES DETTES

Clients avec des proc√©dures non pay√©es
Calcul automatique du montant d√ª vs montant pay√©
D√©tection des factures impay√©es et en retard
D√©tail pr√©cis de chaque dette par proc√©dure

2. ANALYSE DE L'HISTORIQUE CLIENT

Taux de completion des proc√©dures
Nombre de proc√©dures annul√©es vs termin√©es
Score de fid√©lit√© calcul√© automatiquement
Historique des paiements (ponctualit√©, retards)

3. √âVALUATION DE LA CAPACIT√â DE PAIEMENT

Score de cr√©dit bas√© sur l'historique
Comportement de paiement (EXCELLENT/GOOD/POOR)
Limite de cr√©dit recommand√©e
Niveau de risque auto-calcul√©

4. D√âTECTION DES CONFLITS

Proc√©dures similaires d√©j√† en cours
Proc√©dures dupliqu√©es
Conflits de ressources ou de timing

5. SCORE DE RISQUE GLOBAL

Calcul automatique sur 100 points
Prise en compte de tous les facteurs
Recommandations personnalis√©es

üöÄ Fonctionnalit√©s Automatiques
‚úÖ Analyse compl√®te √† chaque cr√©ation de proc√©dure
‚úÖ Rapport d√©taill√© ajout√© automatiquement aux notes
‚úÖ Recommandations intelligentes
‚úÖ Alertes visuelles (üî¥üü°üü¢) selon le niveau de risque
‚úÖ Suggestions d'actions (acompte, surveillance, avantages fid√©lit√©)
üìä Nouveaux Champs de R√©ponse
L'API retourne maintenant un objet clientAnalysis contenant :

debtInfo : Toutes les informations sur les dettes
history : Historique complet du client
paymentCapacity : √âvaluation de la solvabilit√©
conflicts : Conflits d√©tect√©s
riskScore : Score de risque sur 100
recommendations : Liste des recommandations

Cette API transforme chaque cr√©ation de proc√©dure client en une analyse compl√®te et intelligente qui aide √† la prise de d√©cision business !
        `,
      },
    ],
    handler: async ({ query }) => {
      try {
        const response = await fetch(`/api/clients/search?q=${encodeURIComponent(query)}&organizationId=${organizationId}`);
        const clients = await response.json();
        return {
          success: true,
          data: clients,
          message: `Trouv√© ${clients.length} client(s) correspondant √† "${query}"`,
        };
      } catch(error)  {
        return { success: false, error};
      }
    },
  });

  // Action pour obtenir les statistiques de l'organisation
  useCopilotAction({
    name: "getOrganizationStats",
    description: "Obtenir les statistiques g√©n√©rales de l'organisation",
    parameters: [],
    handler: async () => {
      try {
        const response = await fetch(`/api/dashboard/stats?organizationId=${organizationId}`);
        const stats = await response.json();
        return {
          success: true,
          data: stats,
          message: "Statistiques de l'organisation r√©cup√©r√©es avec succ√®s",
        };
      } catch  {
        return { success: false, error: "Erreur lors de la r√©cup√©ration des statistiques" };
      }
    },
  });

  // Action pour rechercher des proc√©dures
  useCopilotAction({
    name: "searchProcedures",
    description: "Rechercher des proc√©dures dans l'organisation",
    parameters: [
      {
        name: "query",
        type: "string",
        description: "Terme de recherche pour les proc√©dures",
      },
      {
        name: "status",
        type: "string",
        description: "Statut des proc√©dures (optionnel): IN_PROGRESS, COMPLETED, CANCELLED, FAILED",
        required: false,
      },
    ],
    handler: async ({ query, status }) => {
      try {
        const params = new URLSearchParams({
          q: query,
          organizationId: organizationId || "",
        });
        if (status) params.append("status", status);

        const response = await fetch(`/api/procedures/search?${params}`);
        const procedures = await response.json();
        return {
          success: true,
          data: procedures,
          message: `Trouv√© ${procedures.length} proc√©dure(s)`,
        };
      } catch  {
        return { success: false, error: "Erreur lors de la recherche de proc√©dures" };
      }
    },
  });

  // Action pour obtenir les transactions r√©centes
  useCopilotAction({
    name: "getRecentTransactions",
    description: "Obtenir les transactions r√©centes de l'organisation",
    parameters: [
      {
        name: "limit",
        type: "number",
        description: "Nombre de transactions √† r√©cup√©rer (d√©faut: 10)",
        required: false,
      },
      {
        name: "type",
        type: "string",
        description: "Type de transaction: EXPENSE, REVENUE, TRANSFER",
        required: false,
      },
    ],
    handler: async ({ limit = 10, type }) => {
      try {
        const params = new URLSearchParams({
          organizationId: organizationId || "",
          limit: limit.toString(),
        });
        if (type) params.append("type", type);

        const response = await fetch(`/api/transactions/recent?${params}`);
        const transactions = await response.json();
        return {
          success: true,
          data: transactions,
          message: `${transactions.length} transaction(s) r√©cente(s) r√©cup√©r√©e(s)`,
        };
      } catch  {
        return { success: false, error: "Erreur lors de la r√©cup√©ration des transactions" };
      }
    },
  });

  // Action pour cr√©er une nouvelle proc√©dure client
  useCopilotAction({
    name: "createClientProcedure",
    description: "Cr√©er une nouvelle proc√©dure pour un client",
    parameters: [
      {
        name: "clientId",
        type: "string",
        description: "ID du client",
      },
      {
        name: "procedureId",
        type: "string",
        description: "ID de la proc√©dure √† suivre",
      },
      {
        name: "notes",
        type: "string",
        description: "Notes sur cette proc√©dure client",
        required: false,
      },
      {
        name: "dueDate",
        type: "string",
        description: "Date d'√©ch√©ance pr√©vue (format ISO)",
        required: false,
      },
    ],
    handler: async ({ clientId, procedureId, notes, dueDate }) => {
      try {
        const response = await fetch("/api/client-procedures", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            clientId,
            procedureId,
            organizationId,
            notes,
            dueDate: dueDate ? new Date(dueDate) : undefined,
          }),
        });
        const result = await response.json();
        return {
          success: true,
          data: result,
          message: "Proc√©dure client cr√©√©e avec succ√®s",
        };
      } catch  {
        return { success: false, error: "Erreur lors de la cr√©ation de la proc√©dure client" };
      }
    },
  });

  // Action pour obtenir le r√©sum√© financier
  useCopilotAction({
    name: "getFinancialSummary",
    description: "Obtenir un r√©sum√© financier de l'organisation",
    parameters: [
      {
        name: "period",
        type: "string",
        description: "P√©riode: 'month', 'quarter', 'year'",
        required: false,
      },
    ],
    handler: async ({ period = "month" }) => {
      try {
        const response = await fetch(`/api/financial/summary?organizationId=${organizationId}&period=${period}`);
        const summary = await response.json();
        return {
          success: true,
          data: summary,
          message: `R√©sum√© financier pour la p√©riode: ${period}`,
        };
      } catch  {
        return { success: false, error: "Erreur lors de la r√©cup√©ration du r√©sum√© financier" };
      }
    },
  });
}
